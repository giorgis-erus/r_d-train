---------------Пункт 1-----------
SELECT cat_name, num from 

  (SELECT category_id, count(film_id) as num
   FROM public.film_category
   GROUP BY category_id) as films

  LEFT OUTER JOIN
  
  (SELECT category_id as id, "name" as cat_name 
   FROM public.category) as cat
  
  on films.category_id = cat.id
  
ORDER BY num desc

---------------Пункт 1-----------

----------------Пункт 2-----------------
select act.actor_id, first_name, last_name, sum(rental_duration) as sum_rent
from public.film as f
left join public.film_actor as f_a on f.film_id = f_a.film_id 
left join public.actor as act on act.actor_id = f_a.actor_id
group by act.actor_id, first_name, last_name
order by sum_rent desc
limit 10	
----------------Пункт 2-----------------


----------------Пункт 4-----------------
select f.film_id, f2.title 
from public.film as f
left outer join
public.inventory as inv
On f.film_id = inv.film_id 
left outer join 
public.film f2 
on f.film_id = f2.film_id 
Where inv.film_id is null
----------------Пункт 4-----------------

-----------------Пункт 5------------------
--
select result2.actor_id, first_name, last_name
from
(
  --Здесь считаем какой актер по счету в списке с количеством фильмов
	select distinct actor_id, cnt,
	dense_rank() over (order by cnt desc) as pos
	from 
	(
    --Здесь считаем в скольких фильмах из категории 'Children' снялись актеры
		select actor_id, fa.film_id as film_id, 
		count(*) over(partition by actor_id) as cnt
		from public.film_actor fa 
		left outer join public.film_category fc 
		on fa.film_id = fc.film_id 
		where fc.category_id  in (select category_id from public.category where "name" = 'Children')
		
	) result1
	order by (dense_rank() over (order by cnt desc)) asc
) as result2
left outer join 
public.actor a 
on result2.actor_id = a.actor_id
where pos <=3
order by pos desc
--Выводим актеров, у которых ранг <=3, по убыванию ранга

---------------Пункт 5---------------------

-----------------Пункт 6--------------------
--сa - количество активных клиентов
--cna - количествно неактивных клиентов

--сс или сa могут быть is NULL, если для города из таблицы city не нашлось соответствия адреса в таблице address, либо если по найденному адресу нет клиента в таблице customer

select distinct c.city_id as c_id, city,
sum (case when active is null then null when active = 1 then 1 else 0 end) over (partition by c.city_id) as ca,
sum (case when active is null then null when active = 0 then 1 else 0 end) over (partition by c.city_id) as cna
from 
public.city c
left outer join 
public.address a  
on c.city_id = a.city_id
left outer join 
public.customer c2
on a.address_id = c2.address_id 
order by sum (case when active is null then null when active = 0 then 1 else 0 end) over (partition by c.city_id) desc

-----------------Пункт 6--------------------
